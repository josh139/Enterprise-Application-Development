@page "/create_ticket/{Id:guid}"

@inject NavigationManager Navigation
@inject HttpClient Http

<div>
    <button class="btn btn-outline-secondary oi oi-arrow-left" @onclick="GoToHome"></button>
    <h3 class="text-center display-3">Create Ticket</h3>
</div>

<hr />

<EditForm Model="Ticket" OnValidSubmit="@HandleValidSubmit">

    <div class="form-group row">
        <label for="Name" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <InputText id="Name" class="form-control" placeholder="Name" @bind-Value="Ticket.Name" />
            <ValidationMessage For="@(() => Ticket.Name)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="Description" class="col-sm-2 col-form-label">Description</label>
        <div class="col-sm-10">
            <InputText id="Description" class="form-control" placeholder="Description" @bind-Value="Ticket.Description" />
            <ValidationMessage For="@(() => Ticket.Description)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="Priority" class="col-sm-2 col-form-label">Priority</label>
        <div class="col-sm-10">
            <InputSelect  id="Priority" class="form-control" @bind-Value="Ticket.Priority">
                @foreach (var priority in Enum.GetValues(typeof(TicketPriority)))
                {
                    <option value="@priority">@priority</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Ticket.Priority)" />
        </div>
    </div>

    <hr />

    <div class="row justify-content-md-center">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</EditForm>

@code {
    private void GoToHome()
    {
        Navigation.NavigateTo("/");
    }

    [Parameter] public Guid Id { get; set; }
    private Board Board { get; set; } = new Board();
    private Ticket Ticket { get; set; } = new Ticket();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Board = await Http.GetFromJsonAsync<Board>($"api/Boards/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            Console.WriteLine("VALID SUBMIT!");

            Ticket newTicket = new Ticket(Ticket.Name, Ticket.Description, Ticket.Priority, Ticket.BoardId);

            newTicket.BoardId = Board.Id;

            var response = await Http.PostAsJsonAsync("/api/Tickets", newTicket);
            response.EnsureSuccessStatusCode();

            Navigation.NavigateTo($"/read_board/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}

