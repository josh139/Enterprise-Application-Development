@page "/create_company"

@inject NavigationManager Navigation
@inject HttpClient Http

<div>
    <button class="btn btn-outline-secondary oi oi-arrow-left" @onclick="GoToReadCompany"></button>
    <h3 class="text-center display-3">Create Company</h3>
</div>

<hr />

<EditForm Model="Company" OnValidSubmit="@HandleValidSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <div class="form-group row">
        <label for="Name" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <InputText id="Name" class="form-control" placeholder="Name" @bind-Value="Company.Name" />
            <ValidationMessage For="@(() => Company.Name)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="CompanyFounded" class="col-sm-2 col-form-label">Founded</label>
        <div class="col-sm-10">
            <InputDate id="CompanyFounded" class="form-control" @bind-Value="Company.Founded" />
            <ValidationMessage For="@(() => Company.Founded)" />
        </div>
    </div>

    <hr />

    <div class="row justify-content-md-center">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</EditForm>

@code {
    private void GoToReadCompany()
    {
        Navigation.NavigateTo("/read_companies");
    }

    private Company Company { get; set; } = new Company("", new DateTime());

    private async void HandleValidSubmit()
    {
        try
        {
            Console.WriteLine("VALID SUBMIT!");

            Company newCompany = new Company(Company.Name, Company.Founded);

            var response = await Http.PostAsJsonAsync("api/Companies", newCompany);
            response.EnsureSuccessStatusCode();

            Navigation.NavigateTo("/read_companies");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}