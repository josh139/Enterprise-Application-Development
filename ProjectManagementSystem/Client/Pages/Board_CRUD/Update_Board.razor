@page "/update_board/{Id:guid}"

@inject NavigationManager Navigation
@inject HttpClient Http

<div>
    <button class="btn btn-outline-secondary oi oi-arrow-left" @onclick="GoToHome"></button>
    <h3 class="text-center">Update @Board.Name board</h3>
</div>

<hr />

<EditForm Model="Board" OnValidSubmit="@HandleValidSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <div class="form-group row">
        <label for="Company" class="col-sm-2 col-form-label">Company</label>
        <div class="col-sm-10">
            <InputSelect id="Company" class="form-control" @bind-Value="Board.CompanyId">
                @foreach (var company in Companies)
                {
                    <option value="@company.Id">@company.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Board.CompanyId)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="Name" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <InputText id="Name" class="form-control" placeholder="Name" @bind-Value="Board.Name" />
            <ValidationMessage For="@(() => Board.Name)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="Description" class="col-sm-2 col-form-label">Description</label>
        <div class="col-sm-10">
            <InputText id="Description" class="form-control" placeholder="Description" @bind-Value="Board.Description" />
            <ValidationMessage For="@(() => Board.Description)" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    [Parameter] public Guid Id { get; set; }
    private Board Board { get; set; } = new Board();
    private List<Company> Companies = new List<Company>();
    private List<Board> Boards = new List<Board>();

    private void GoToHome()
    {
        Navigation.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Board = await Http.GetFromJsonAsync<Board>($"api/Boards/{Id}");
            Companies = await Http.GetFromJsonAsync<List<Company>>("/api/Companies");
            Boards = await Http.GetFromJsonAsync<List<Board>>("/api/Boards");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/Boards/{Board.Id}", Board);
            response.EnsureSuccessStatusCode();
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
